I"ó<h1 id="taking-time-to-smell-the-roses">Taking Time to Smell the Roses</h1>

<p>I havenâ€™t made a new post in some time now. In between writing scripts for my experiments and LaTeX, I have little time to program for fun. Thankfully, my winter semester is over and the spring of 2022 seems to be delayed; Iâ€™m at a delightful intersection where no one expects anything from me and I canâ€™t do much outside anyway. Iâ€™m sitting in my parentsâ€™ lawn, watching our cats, and I want to make something.</p>

<p>I donâ€™t have the time to make something from scratch, but I do have one old project I wanted to remake: the Wikipedia Network Research Assistant. Two years ago, I wrote a version of this tool in Python when I first learned the language. Iâ€™m sure I made it suboptimally, Iâ€™d like to return to this well.</p>

<h1 id="the-wikipedia-network-research-assistant-wnra">The Wikipedia Network Research Assistant (WNRA)</h1>

<p>(<em>Not to be confused with the Womenâ€™s National Rifle Association</em>)</p>

<p>The premise here is simple:</p>

<ol>
  <li>Ask the user for a term.</li>
  <li>Look up the Wikipedia article for that term.</li>
  <li>Using some heuristic, figure out a list of the most commonly related terms.</li>
  <li>Recursively figure out what terms are related to those terms (with a configurable depth and breadth of the search).</li>
  <li>Visualize the results.</li>
</ol>

<p>I used the best libraries I could find for this kind of task: <a href="https://github.com/goldsmith/Wikipedia">Wikipedia</a> to scan the Wikipedia pages and <a href="https://networkx.org/">NetworkX</a> to visualize the results in a network plot. After about 90 lines of code, I was really happy with the results, presented below:</p>

<!-- ![Now that's a lot of latin](..\assets\img\wiki\old\Cactus.webp){: .mx-auto.d-block :}
<figcaption align = "center"><i>Cactus</i></figcaption> -->

<p><img src="..\assets\img\wiki\old\cat.webp" alt="" class="mx-auto d-block" /></p>
<figcaption align="center"><i>Cat</i></figcaption>

<!-- ![](..\assets\img\wiki\old\OmShantiOm.webp){: .mx-auto.d-block :}
<figcaption align = "center"><i>Om Shanti Om</i></figcaption> -->

<!-- ![](..\assets\img\wiki\old\PostMalone.webp){: .mx-auto.d-block :}
<figcaption align = "center"><i>Post Malone</i></figcaption> -->

<p><img src="..\assets\img\wiki\old\TaylorSwift.webp" alt="" class="mx-auto d-block" /></p>
<figcaption align="center"><i>Taylor Swift</i></figcaption>

<p><img src="..\assets\img\wiki\old\Toronto.webp" alt="" class="mx-auto d-block" /></p>
<figcaption align="center"><i>Toronto</i></figcaption>

<h2 id="thoughts-on-the-results">Thoughts on the Results</h2>

<ol>
  <li>
    <p>Itâ€™s unreadable (I didnâ€™t care to look any deeper in the <a href="https://networkx.org/">NetworkX</a> library to make text a little more legible. The sun is setting, and itâ€™s time to take my cats back inside.)</p>
  </li>
  <li>
    <p>The way networks form is surprisingly pleasing to the eye, even though I didnâ€™t spend any effort on this part. Shout-out to the developers of <a href="https://networkx.org/">NetworkX</a>.</p>
  </li>
  <li>
    <p>I could apply this to other APIs: <a href="https://github.com/ElsevierDev/elsapy">Elsevier</a>, <a href="https://developer.ieee.org/Python_Software_Development_Kit">IEEE</a>, and <a href="https://github.com/scholarly-python-package/scholarly">Google Scholar</a> all seem to have some sort of API accessible through Python (even if they are not official).</p>
  </li>
  <li>
    <p>Kanye West does not show up in Taylor Swiftâ€™s network. It seems he did not make her famous.</p>
  </li>
  <li>
    <p>Thereâ€™s no child nodes that connect to each other. Did I forget to program that in or is that somehow just how these results look?</p>
  </li>
  <li>
    <p>Thereâ€™s no visual indication here of whether there is a two-way connection between parent nodes and their children. In other words, thereâ€™s no way to know if a node is the child of its own children. In other words, is a node <a href="https://youtu.be/lxL9dl1zR0o?t=75">its own grandparent?</a></p>
  </li>
  <li>
    <p>These results are extremely cherry-picked - most terms would throw errors for some reason (this seems to be a flaw with the Wikipedia API Iâ€™m using). I did find the more involved <a href="https://github.com/nyurik/pywikiapi">PyWikiApi</a>, a minimalistic library for the core <a href="https://www.mediawiki.org/wiki/API:Main_page">MediaWiki API</a> when I started, but chose to ignore it for simplicity. This is on me.</p>
  </li>
  <li>
    <p>It would be nice to embed more information. Things like:</p>

    <p>a. Word count of article (relate it to the size of the node)</p>

    <p>b. Date Article was created (transparency of the node)</p>

    <p>c. Degrees of Separation from Initial Term (colour of node/edge)</p>

    <p>d. Number of cross-references between articles (thickness of edge)</p>
  </li>
</ol>

<p><em>I will stop myself before I get too deep into potential improvements. That well would never dry.</em></p>

<h1 id="on-the-unreasonable-effectiveness-of-python-libraries">On the Unreasonable Effectiveness of Python Libraries</h1>

<p>Itâ€™s been said by a million people before me, but the code-density of Python is absurd. This project took an afternoon and less than 100 lines Iâ€™m quite happy with it.</p>
:ET